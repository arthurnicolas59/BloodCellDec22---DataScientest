import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import PIL
import PIL.Image
from PIL import Image
import tensorflow as tf
from tqdm import tqdm
import glob
import os

st.set_option('deprecation.showPyplotGlobalUse', False)


st.set_page_config(
    page_title="EDA",
    page_icon="üìä",
)

#EDA
st.header("Analyse Exploratoire des Donn√©es")

tab1, tab2, tab3,tab4,tab5,tab6 = st.tabs(["**Structure du dataset**", "**Dataframe**", "**Aper√ßu**","**R√©partition par classe**","**Moyenne et √©cart type**","**Projection 2D**"])

with tab1:
   st.subheader("Structure du dataset")
   st.write('Les images t√©l√©charg√©es sont r√©parties en 8 sous dossiers')
   st.image('streamlit_media\Explorateur_fichiers.png', width=200)

with tab2:
   st.subheader("Dataframe")
   st.write('''Selon cette architecture, les images pr√©sentaient les chemins d'acc√®s suivants, que nous avons enregistr√©s dans un dataframe''')
   df=pd.read_csv('Dataframe\df_cleaned.csv')
   df.sort_values('Path')
   st.dataframe(df)

with tab3:
    st.subheader("Aper√ßu")
    st.divider()
    st.markdown('''
                * :red[Echantillon al√©toire : 1 image par cat√©gorie]''')

    if st.button('Afficher un nouvel √©chantillon al√©atoire'):
        list_category = df.target.unique()

        # Assurez-vous qu'il y a au maximum 8 cat√©gories
        if len(list_category) > 8:
            raise ValueError("Il y a plus de 8 cat√©gories, ce qui d√©passe le nombre d'emplacements d'images disponibles.")

        # Cr√©ation de la figure
        fig, axs = plt.subplots(nrows=2, ncols=4, figsize=(10, 5))

        for i, category in enumerate(list_category):
            subset = df[df["target"] == category].sample(n=1)
            image_path = subset["Path"].values[0]

            # Charger et afficher l'image
            image = Image.open(image_path)
            ax = axs[i // 4, i % 4]  # Ajustement de l'indexation pour 2x4 grille
            ax.imshow(image)
            ax.set_title(category)
            ax.axis("off")

        plt.tight_layout()  # Pour un espacement appropri√© entre les sous-trac√©s
        st.pyplot()
    st.divider()

   # R√©cup√©rer la liste unique des cat√©gories dans votre DataFrame
    st.markdown('''
                * :red[Echantillon de 9 images par cat√©gorie]''')
    categories = df['target'].unique()

    # Cr√©er un selectbox pour choisir une cat√©gorie
    selected_category = st.selectbox('Choisissez une cat√©gorie:', categories,key="1")

    subset = df[df["target"] == selected_category].sample(n=9)

    #cr√©ation de la figure
    fig, axs = plt.subplots(nrows=3, ncols=3, figsize=(10, 10))

# boucle for
    for i, ax in enumerate(axs.flat):
        # chargement image
        img = Image.open(subset.iloc[i]["Path"])
        # Plot image
        ax.imshow(img)
        ax.set_axis_off()
        ax.set_title(f"Image {i+1}")
        plt.suptitle("Cat√©gorie visualis√©e : {}".format(selected_category), fontsize=20)

    # Visualisation
    st.pyplot(fig)

with tab4:
    st.subheader("R√©partition par classe")

#################################
    import plotly.express as px

    # Triez les cat√©gories target par d√©compte d√©croissant
    sorted_targets = df['target'].value_counts().index.tolist()

    # Utilisez plotly pour cr√©er un histogramme avec les cat√©gories tri√©es
    fig = px.histogram(df, x='target', title='Histogramme r√©partition des images par classe', category_orders={"target": sorted_targets})

    # Affichez le graphique dans Streamlit
    st.plotly_chart(fig)
    ######################

with tab5:
    # Offrez √† l'utilisateur une bo√Æte de s√©lection pour choisir une cat√©gorie
    selected_category = st.selectbox('Choisissez une cat√©gorie', df.target.unique(),key="2")

    subset = df['Path'][df["target"] == selected_category].sample(n=1000)
    liste = []

    for path in subset:
        # Lecture du fichier
        im = tf.io.read_file(path)
        # On d√©code le fichier
        im = tf.image.decode_jpeg(im, channels=3)
        # On uniformise la taille des images
        im = tf.image.resize(im, size=(363, 360))
        # Ajout √† la liste
        liste.append(im)

    liste = np.array(liste)

    col1, col2 = st.columns([0.5,0.5])
    with col1:
        st.subheader("Image moyenne")
        st.markdown('''
                * :red[Echantillon s√©lectif]''')

        image_moyenne = np.mean(liste, axis=0)

        # Cr√©ation de la figure
        fig, ax = plt.subplots(figsize=(7, 5))
        ax.imshow(image_moyenne/255)
        ax.set_title(selected_category)
        ax.axis('off')

        st.pyplot(fig)
        st.divider()                              

        st.markdown('''
            * :red[Affichage multiple]''')
        st.image('streamlit_media/edameanimage.png')

    with col2:

        st.subheader("Ecart type")
        st.markdown('''
                * :red[Echantillon s√©lectif]''')

        image_std = np.std(liste, axis=0)

        # Cr√©ation de la figure
        fig, ax = plt.subplots(figsize=(7, 5))
        ax.imshow(image_std/255)
        ax.set_title(selected_category)
        ax.axis('off')

        st.pyplot(fig)
        st.divider()

        st.markdown('''
            * :red[Affichage multiple]''')
        st.image('streamlit_media/edastdimage.png')

with tab6:
    col1, col2 = st.columns([0.5,0.5])

    with col1:
        st.markdown('''
            * :red[**Projection 2D des images brutes**]''')
        st.image('streamlit_media/Projection2DimagesBrutes.png')

    with col2:
        st.markdown('''
            * :red[**Superposition des vignettes sur la projection**]''')
        st.image('streamlit_media/Projection2DimagesBrutesVignettes.png')

    st.divider()
    col1,col2,col3=st.columns([0.4,0.2,0.4])
    with col1:
        st.write("")
    with col2:        
        st.image('streamlit_media/FlecheBas.png',width=100)
    with col3:
        st.write("")

    col1,col2,col3=st.columns([0.2,0.6,0.2])
    with col1:
        st.write("")
    with col2:
        st.subheader(''':red[Int√©r√™t d'un traitement d'images ?]''')
    with col3:
        st.write("")